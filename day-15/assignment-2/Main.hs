{- Now that you know how to find low-risk paths in the cave, you can try to find
 - your way out.
 -
 - The entire cave is actually five times larger in both dimensions than you
 - thought; the area you originally scanned is just one tile in a 5x5 tile area
 - that forms the full map. Your original map tile repeats to the right and
 - downward; each time the tile repeats to the right or downward, all of its
 - risk levels are 1 higher than the tile immediately up or left of it. However,
 - risk levels above 9 wrap back around to 1. So, if your original map had some
 - position with a risk level of 8, then that same position on each of the 25
 - total tiles would be as follows:
 -
 -    8 9 1 2 3
 -    9 1 2 3 4
 -    1 2 3 4 5
 -    2 3 4 5 6
 -    3 4 5 6 7
 -
 - Each single digit above corresponds to the example position with a value of 8
 - on the top-left tile. Because the full map is actually five times larger in
 - both dimensions, that position appears a total of 25 times, once in each
 - duplicated tile, with the values shown above.
 -
 - Here is the full five-times-as-large version of the first example above, with
 - the original map in the top left corner highlighted:
 -
 -    11637517422274862853338597396444961841755517295286
 -    13813736722492484783351359589446246169155735727126
 -    21365113283247622439435873354154698446526571955763
 -    36949315694715142671582625378269373648937148475914
 -    74634171118574528222968563933317967414442817852555
 -    13191281372421239248353234135946434524615754563572
 -    13599124212461123532357223464346833457545794456865
 -    31254216394236532741534764385264587549637569865174
 -    12931385212314249632342535174345364628545647573965
 -    23119445813422155692453326671356443778246755488935
 -    22748628533385973964449618417555172952866628316397
 -    24924847833513595894462461691557357271266846838237
 -    32476224394358733541546984465265719557637682166874
 -    47151426715826253782693736489371484759148259586125
 -    85745282229685639333179674144428178525553928963666
 -    24212392483532341359464345246157545635726865674683
 -    24611235323572234643468334575457944568656815567976
 -    42365327415347643852645875496375698651748671976285
 -    23142496323425351743453646285456475739656758684176
 -    34221556924533266713564437782467554889357866599146
 -    33859739644496184175551729528666283163977739427418
 -    35135958944624616915573572712668468382377957949348
 -    43587335415469844652657195576376821668748793277985
 -    58262537826937364893714847591482595861259361697236
 -    96856393331796741444281785255539289636664139174777
 -    35323413594643452461575456357268656746837976785794
 -    35722346434683345754579445686568155679767926678187
 -    53476438526458754963756986517486719762859782187396
 -    34253517434536462854564757396567586841767869795287
 -    45332667135644377824675548893578665991468977611257
 -    44961841755517295286662831639777394274188841538529
 -    46246169155735727126684683823779579493488168151459
 -    54698446526571955763768216687487932779859814388196
 -    69373648937148475914825958612593616972361472718347
 -    17967414442817852555392896366641391747775241285888
 -    46434524615754563572686567468379767857948187896815
 -    46833457545794456865681556797679266781878137789298
 -    64587549637569865174867197628597821873961893298417
 -    45364628545647573965675868417678697952878971816398
 -    56443778246755488935786659914689776112579188722368
 -    55172952866628316397773942741888415385299952649631
 -    57357271266846838237795794934881681514599279262561
 -    65719557637682166874879327798598143881961925499217
 -    71484759148259586125936169723614727183472583829458
 -    28178525553928963666413917477752412858886352396999
 -    57545635726865674683797678579481878968159298917926
 -    57944568656815567976792667818781377892989248891319
 -    75698651748671976285978218739618932984172914319528
 -    56475739656758684176786979528789718163989182927419
 -    67554889357866599146897761125791887223681299833479
 -
 - Equipped with the full map, you can now find a path from the top left corner
 - to the bottom right corner with the lowest total risk:
 -
 -    11637517422274862853338597396444961841755517295286
 -    13813736722492484783351359589446246169155735727126
 -    21365113283247622439435873354154698446526571955763
 -    36949315694715142671582625378269373648937148475914
 -    74634171118574528222968563933317967414442817852555
 -    13191281372421239248353234135946434524615754563572
 -    13599124212461123532357223464346833457545794456865
 -    31254216394236532741534764385264587549637569865174
 -    12931385212314249632342535174345364628545647573965
 -    23119445813422155692453326671356443778246755488935
 -    22748628533385973964449618417555172952866628316397
 -    24924847833513595894462461691557357271266846838237
 -    32476224394358733541546984465265719557637682166874
 -    47151426715826253782693736489371484759148259586125
 -    85745282229685639333179674144428178525553928963666
 -    24212392483532341359464345246157545635726865674683
 -    24611235323572234643468334575457944568656815567976
 -    42365327415347643852645875496375698651748671976285
 -    23142496323425351743453646285456475739656758684176
 -    34221556924533266713564437782467554889357866599146
 -    33859739644496184175551729528666283163977739427418
 -    35135958944624616915573572712668468382377957949348
 -    43587335415469844652657195576376821668748793277985
 -    58262537826937364893714847591482595861259361697236
 -    96856393331796741444281785255539289636664139174777
 -    35323413594643452461575456357268656746837976785794
 -    35722346434683345754579445686568155679767926678187
 -    53476438526458754963756986517486719762859782187396
 -    34253517434536462854564757396567586841767869795287
 -    45332667135644377824675548893578665991468977611257
 -    44961841755517295286662831639777394274188841538529
 -    46246169155735727126684683823779579493488168151459
 -    54698446526571955763768216687487932779859814388196
 -    69373648937148475914825958612593616972361472718347
 -    17967414442817852555392896366641391747775241285888
 -    46434524615754563572686567468379767857948187896815
 -    46833457545794456865681556797679266781878137789298
 -    64587549637569865174867197628597821873961893298417
 -    45364628545647573965675868417678697952878971816398
 -    56443778246755488935786659914689776112579188722368
 -    55172952866628316397773942741888415385299952649631
 -    57357271266846838237795794934881681514599279262561
 -    65719557637682166874879327798598143881961925499217
 -    71484759148259586125936169723614727183472583829458
 -    28178525553928963666413917477752412858886352396999
 -    57545635726865674683797678579481878968159298917926
 -    57944568656815567976792667818781377892989248891319
 -    75698651748671976285978218739618932984172914319528
 -    56475739656758684176786979528789718163989182927419
 -    67554889357866599146897761125791887223681299833479
 -
 - The total risk of this path is 315 (the starting position is still never
 - entered, so its risk is not counted).
 -
 - Using the full map, what is the lowest total risk of any path from the top
 - left to the bottom right?
 -}
module Main where

import AdventOfCode
import qualified Data.Text as T
import qualified Text.Parsec as P
import qualified Data.List as L
import qualified Data.Map.Strict as Map
import qualified Data.Maybe as Maybe
import qualified Data.PSQueue as PQ
import Data.PSQueue (Binding((:->)))

main :: IO ()
main = defaultMain parseInput handleInput

type Point = (Int, Int)
data RiskMap = RiskMap
    { _theMap :: !(Map.Map Point Int)
    } deriving (Show, Eq, Ord)

data Distance = Final !Int | Infinity deriving (Show, Eq, Ord)

handleInput :: RiskMap -> IO ()
handleInput
    = print
    . Maybe.fromJust
    . shortestPath (0, 0) (499, 499)
    . expandMap

expandMap :: RiskMap -> RiskMap
expandMap (RiskMap risk) = RiskMap . Map.fromList $ do
    ((x, y), value) <- Map.toList risk
    plusX <- [0..4]
    plusY <- [0..4]
    let value' = head . dropWhile (> 9) . iterate (subtract 9)
            $ value + plusX + plusY
        x' = x + (plusX * width)
        y' = y + (plusY * height)
    return ((x', y'), value')
  where
    width = (+ 1) . maximum . map fst . Map.keys $ risk
    height = (+ 1) . maximum . map snd . Map.keys $ risk

shortestPath :: Point -> Point -> RiskMap -> Maybe Int
shortestPath from to risk
    = Maybe.listToMaybe
    . map snd
    . filter ((== to) . fst)
    . distancesFrom from
    $ risk

distancesFrom :: Point -> RiskMap -> [(Point, Int)]
distancesFrom from (RiskMap risk) = go initialQueue
  where
    go :: PQ.PSQ Point Distance -> [(Point, Int)]
    go queue = case PQ.minView queue of
        Nothing -> []
        Just (_ :-> Infinity, _) -> []
        Just (point :-> Final price, queue') ->
            (point, price) : go (updateNeighbours queue' point price)

    initialQueue :: PQ.PSQ Point Distance
    initialQueue
        = PQ.adjust (const (Final 0)) from
        . PQ.fromList
        . map (:-> Infinity)
        . Map.keys
        $ risk

    updateNeighbours ::
        PQ.PSQ Point Distance -> Point -> Int -> PQ.PSQ Point Distance
    updateNeighbours q point currentPrice =
        L.foldl' (setMinPrice currentPrice) q $ neighbours point

    neighbours :: Point -> [(Point, Int)]
    neighbours (x, y)
        = Maybe.catMaybes
        . map (\point -> Map.lookup point risk >>= \price -> pure (point, price))
        $ [(x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1)]

    setMinPrice ::
        Int -> PQ.PSQ Point Distance -> (Point, Int) -> PQ.PSQ Point Distance
    setMinPrice currentPrice q (point, price) =
        PQ.adjust (\p -> min p (Final $ currentPrice + price)) point q

fromRows :: [[Int]] -> RiskMap
fromRows rows = RiskMap . Map.fromList $ do
    (row, rowN) <- zip rows [0..]
    (risk, colN) <- zip row [0..]

    return $ ((colN, rowN), risk)

parseInput :: T.Text -> Either P.ParseError RiskMap
parseInput = P.parse (parseMap <* P.eof) ""

parseMap :: P.Parsec T.Text () RiskMap
parseMap = fromRows <$> parseRow `P.endBy` P.newline

parseRow :: P.Parsec T.Text () [Int]
parseRow = map f <$> P.many1 P.digit
  where
    f '0' = 0
    f '1' = 1
    f '2' = 2
    f '3' = 3
    f '4' = 4
    f '5' = 5
    f '6' = 6
    f '7' = 7
    f '8' = 8
    f '9' = 9
    f err = error $ "Unexpected argument " ++ show err
